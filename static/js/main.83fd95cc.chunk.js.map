{"version":3,"sources":["components/Header.jsx","components/Formulario.jsx","components/Error.jsx","components/Clima.jsx","App.js","serviceWorker.js","index.js"],"names":["Header","props","react_default","a","createElement","className","href","titulo","Formulario","ciudadRef","React","createRef","paisRef","buscarClima","e","preventDefault","respuesta","ciudad","_this","current","value","pais","datosConsulta","currentTarget","reset","onSubmit","this","id","type","ref","htmlFor","name","defaultValue","Component","Error","mensaje","Clima","mostrarResultado","_this$props$resultado","resultado","weather","main","urlIcon","concat","icon","alt","temp","toFixed","src","temp_max","temp_min","App","state","consulta","error","consultarApi","_this$state$consulta","url","fetch","then","res","json","data","setState","catch","err","console","log","M","AutoInit","prevProps","prevState","cod","components_Error","Clima_Clima","components_Header","Formulario_Formulario","Boolean","window","location","hostname","match","ReactDOM","render","App_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.83fd95cc.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Header = (props) => {\n   return (\n      <header>\n         <nav>\n            <div className=\"nav-wrapper light-blue darken-2\">\n               <a href=\"localhost:3000\" className=\"brand-logo\">{props.titulo}</a>\n            </div>\n         </nav>\n      </header>\n   );\n};\n\nHeader.propTypes = {\n   titulo: PropTypes.string.isRequired\n}\n\nexport default Header;","import React, { Component } from 'react'\nimport PropTypes from 'prop-types';\n\nexport default class Formulario extends Component {\n\n   ciudadRef = React.createRef();\n   paisRef = React.createRef();\n\n   buscarClima = (e) => {\n      e.preventDefault();\n\n      const ciudad = this.ciudadRef.current.value,\n         pais = this.paisRef.current.value;\n\n      const respuesta = {\n         ciudad,\n         pais\n      }\n\n      this.props.datosConsulta(respuesta);\n\n      e.currentTarget.reset();\n   }\n\n   render() {\n      return (\n         <div className=\"contenedor-form\">\n            <div className=\"container\">\n               <div className=\"row\">\n                  <form onSubmit={this.buscarClima}>\n                     <div className=\"input-field col s12 m8 l4 offset-m2\">\n                        <input id=\"ciudad\" type=\"text\" ref={this.ciudadRef} />\n                        <label htmlFor=\"ciudad\">Ciudad</label>\n                     </div>\n                     <div className=\"input-field col s12 m8 l4 offset-m2\">\n                        <select name=\"pais\" id=\"pais\" ref={this.paisRef}>\n                           <option value=\"\" defaultValue>Elige un país</option>\n                           <option value=\"AR\">Argentina</option>\n                           <option value=\"CO\">Colombia</option>\n                           <option value=\"CR\">Costa Rica</option>\n                           <option value=\"ES\">España</option>\n                           <option value=\"US\">Estados Unidos</option>\n                           <option value=\"MX\">México</option>\n                           <option value=\"PE\">Perú</option>\n                        </select>\n                        <label htmlFor=\"pais\">País:</label>\n                     </div>\n                     <div className=\"input-field col s12 m8 l4 offset-m2 buscador\">\n                        <input type=\"submit\" value=\"Buscar\" className=\"waves-effect waves-light btn btn-large yellow accent-4\" />\n                     </div>\n                  </form>\n               </div>\n            </div>\n         </div>\n      )\n   }\n}\n\nFormulario.propTypes = {\n   datosConsulta: PropTypes.func.isRequired\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Error = (props) => {\n   return (\n      <div className=\"container\">\n         <div className=\"row\">\n            <div className=\"col s12 m6 offset-m3\">\n               <div className=\"card-panel red darken-4 error\">\n                  {props.mensaje}\n               </div>\n            </div>\n         </div>\n      </div>\n   );\n};\n\nError.propTypes = {\n   mensaje: PropTypes.string.isRequired\n}\n\n\nexport default Error;","import React, { Component } from 'react'\nimport PropTypes from 'prop-types';\n\nexport default class Clima extends Component {\n\n   mostrarResultado = () => {\n      const { name, weather, main } = this.props.resultado;\n      if (!name || !weather || !main) return null;\n\n      const kelvin = 273.15;\n      const urlIcon = `http://openweathermap.org/img/w/${weather[0].icon}.png`;\n      const alt = `Clima de ${name}`;\n\n      return (\n         <div className=\"row\">\n            <div className=\"resultado col s12 m8 l6 offset-m2 offset-l3\">\n               <div className=\"card-panel light-blue align-center\">\n                  <span className=\"white-text\">\n                     <h2>Resultado Clima de: {name}</h2>\n                     <p className=\"temperatura\">\n                        Actual: {(main.temp - kelvin).toFixed(2)} &deg;C <img src={urlIcon} alt={alt} />\n                     </p>\n                     <p>Max. {(main.temp_max - kelvin).toFixed(2)} &deg;C</p>\n                     <p>Min. {(main.temp_min - kelvin).toFixed(2)} &deg;C</p>\n                  </span>\n               </div>\n            </div>\n         </div>\n      )\n   }\n\n   render() {\n      return (\n         <div className=\"container\">\n            {this.mostrarResultado()}\n         </div>\n      )\n   }\n}\n\nClima.propTypes = {\n   resultado: PropTypes.object.isRequired\n}\n","import React, { Component } from 'react';\nimport M from 'materialize-css/dist/js/materialize.min';\nimport Header from './components/Header';\nimport Formulario from './components/Formulario';\nimport Error from './components/Error';\nimport Clima from './components/Clima';\n\nexport default class App extends Component {\n\n  state = {\n    consulta: {},\n    resultado: {},\n    error: false\n  }\n\n  componentDidMount() {\n    M.AutoInit();\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (prevState.consulta !== this.state.consulta) {\n      this.consultarApi();\n    }\n  }\n\n  consultarApi = () => {\n    const { ciudad, pais } = this.state.consulta;\n    if (!ciudad || !pais) return null;\n\n    const appId = '30bee516240e71853bcb3cae9cde5ae9';\n    let url = `https://api.openweathermap.org/data/2.5/weather?q=${ciudad},${pais}&appid=${appId}`;\n\n    fetch(url)\n      .then(res => {\n        return res.json();\n      }).then(data => {\n        this.setState({\n          resultado: data\n        });\n      }).catch(err => {\n        console.log(err);\n      });\n  }\n\n  datosConsulta = (res) => {\n    if (res.ciudad === '' || res.pais === '') {\n      this.setState({\n        error: true\n      });\n    } else {\n      this.setState({\n        consulta: res,\n        error: false\n      });\n    }\n  }\n\n  render() {\n\n    const { error } = this.state,\n      { cod } = this.state.resultado;\n\n    let resultado;\n\n    if (error) {\n      resultado = <Error mensaje=\"Ambos campos son obligatorios\" />\n    } else if (cod === '404') {\n      resultado = <Error mensaje=\"Ciudad no encontrada\" />\n    } else {\n      resultado = <Clima resultado={this.state.resultado} />\n    }\n\n    return (\n      <div className=\"App\">\n        <Header titulo='Clima React' />\n        <Formulario datosConsulta={this.datosConsulta} />\n        {resultado}\n      </div>\n    )\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'materialize-css/dist/css/materialize.min.css';\nimport './scss/index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}